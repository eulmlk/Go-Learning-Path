// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "task_manager/domain"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// AddUser provides a mock function with given fields: userData, claims
func (_m *UserUsecase) AddUser(userData *domain.CreateUserData, claims *domain.Claims) (*domain.User, *domain.Error) {
	ret := _m.Called(userData, claims)

	if len(ret) == 0 {
		panic("no return value specified for AddUser")
	}

	var r0 *domain.User
	var r1 *domain.Error
	if rf, ok := ret.Get(0).(func(*domain.CreateUserData, *domain.Claims) (*domain.User, *domain.Error)); ok {
		return rf(userData, claims)
	}
	if rf, ok := ret.Get(0).(func(*domain.CreateUserData, *domain.Claims) *domain.User); ok {
		r0 = rf(userData, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.CreateUserData, *domain.Claims) *domain.Error); ok {
		r1 = rf(userData, claims)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Error)
		}
	}

	return r0, r1
}

// DeleteUser provides a mock function with given fields: objectID, claims
func (_m *UserUsecase) DeleteUser(objectID primitive.ObjectID, claims *domain.Claims) *domain.Error {
	ret := _m.Called(objectID, claims)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 *domain.Error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, *domain.Claims) *domain.Error); ok {
		r0 = rf(objectID, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Error)
		}
	}

	return r0
}

// GetUserByID provides a mock function with given fields: objectID
func (_m *UserUsecase) GetUserByID(objectID primitive.ObjectID) (*domain.User, *domain.Error) {
	ret := _m.Called(objectID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByID")
	}

	var r0 *domain.User
	var r1 *domain.Error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*domain.User, *domain.Error)); ok {
		return rf(objectID)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *domain.User); ok {
		r0 = rf(objectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) *domain.Error); ok {
		r1 = rf(objectID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Error)
		}
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *UserUsecase) GetUserByUsername(username string) (*domain.User, *domain.Error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *domain.User
	var r1 *domain.Error
	if rf, ok := ret.Get(0).(func(string) (*domain.User, *domain.Error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *domain.Error); ok {
		r1 = rf(username)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Error)
		}
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields:
func (_m *UserUsecase) GetUsers() ([]domain.User, *domain.Error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetUsers")
	}

	var r0 []domain.User
	var r1 *domain.Error
	if rf, ok := ret.Get(0).(func() ([]domain.User, *domain.Error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.User); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func() *domain.Error); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Error)
		}
	}

	return r0, r1
}

// UpdateUser provides a mock function with given fields: objectID, userData, claims
func (_m *UserUsecase) UpdateUser(objectID primitive.ObjectID, userData *domain.UpdateUserData, claims *domain.Claims) (*domain.User, *domain.Error) {
	ret := _m.Called(objectID, userData, claims)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *domain.User
	var r1 *domain.Error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, *domain.UpdateUserData, *domain.Claims) (*domain.User, *domain.Error)); ok {
		return rf(objectID, userData, claims)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, *domain.UpdateUserData, *domain.Claims) *domain.User); ok {
		r0 = rf(objectID, userData, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID, *domain.UpdateUserData, *domain.Claims) *domain.Error); ok {
		r1 = rf(objectID, userData, claims)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Error)
		}
	}

	return r0, r1
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
