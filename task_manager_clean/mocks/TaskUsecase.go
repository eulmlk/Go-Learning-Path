// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "task_manager/domain"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: taskData, claims
func (_m *TaskUsecase) CreateTask(taskData *domain.CreateTaskData, claims *domain.Claims) (*domain.TaskView, *domain.Error) {
	ret := _m.Called(taskData, claims)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *domain.TaskView
	var r1 *domain.Error
	if rf, ok := ret.Get(0).(func(*domain.CreateTaskData, *domain.Claims) (*domain.TaskView, *domain.Error)); ok {
		return rf(taskData, claims)
	}
	if rf, ok := ret.Get(0).(func(*domain.CreateTaskData, *domain.Claims) *domain.TaskView); ok {
		r0 = rf(taskData, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TaskView)
		}
	}

	if rf, ok := ret.Get(1).(func(*domain.CreateTaskData, *domain.Claims) *domain.Error); ok {
		r1 = rf(taskData, claims)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Error)
		}
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: objectID, claims
func (_m *TaskUsecase) DeleteTask(objectID primitive.ObjectID, claims *domain.Claims) *domain.Error {
	ret := _m.Called(objectID, claims)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 *domain.Error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, *domain.Claims) *domain.Error); ok {
		r0 = rf(objectID, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Error)
		}
	}

	return r0
}

// GetAllTasks provides a mock function with given fields:
func (_m *TaskUsecase) GetAllTasks() ([]domain.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]domain.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: objectID
func (_m *TaskUsecase) GetTaskByID(objectID primitive.ObjectID) (*domain.Task, *domain.Error) {
	ret := _m.Called(objectID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *domain.Task
	var r1 *domain.Error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) (*domain.Task, *domain.Error)); ok {
		return rf(objectID)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID) *domain.Task); ok {
		r0 = rf(objectID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID) *domain.Error); ok {
		r1 = rf(objectID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Error)
		}
	}

	return r0, r1
}

// GetTasks provides a mock function with given fields:
func (_m *TaskUsecase) GetTasks() ([]domain.Task, *domain.Error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetTasks")
	}

	var r0 []domain.Task
	var r1 *domain.Error
	if rf, ok := ret.Get(0).(func() ([]domain.Task, *domain.Error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []domain.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() *domain.Error); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Error)
		}
	}

	return r0, r1
}

// ReplaceTask provides a mock function with given fields: objectID, taskData, claims
func (_m *TaskUsecase) ReplaceTask(objectID primitive.ObjectID, taskData *domain.ReplaceTaskData, claims *domain.Claims) (*domain.TaskView, *domain.Error) {
	ret := _m.Called(objectID, taskData, claims)

	if len(ret) == 0 {
		panic("no return value specified for ReplaceTask")
	}

	var r0 *domain.TaskView
	var r1 *domain.Error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, *domain.ReplaceTaskData, *domain.Claims) (*domain.TaskView, *domain.Error)); ok {
		return rf(objectID, taskData, claims)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, *domain.ReplaceTaskData, *domain.Claims) *domain.TaskView); ok {
		r0 = rf(objectID, taskData, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.TaskView)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID, *domain.ReplaceTaskData, *domain.Claims) *domain.Error); ok {
		r1 = rf(objectID, taskData, claims)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Error)
		}
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: objectID, taskData, claims
func (_m *TaskUsecase) UpdateTask(objectID primitive.ObjectID, taskData *domain.UpdateTaskData, claims *domain.Claims) (*domain.Task, *domain.Error) {
	ret := _m.Called(objectID, taskData, claims)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *domain.Task
	var r1 *domain.Error
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, *domain.UpdateTaskData, *domain.Claims) (*domain.Task, *domain.Error)); ok {
		return rf(objectID, taskData, claims)
	}
	if rf, ok := ret.Get(0).(func(primitive.ObjectID, *domain.UpdateTaskData, *domain.Claims) *domain.Task); ok {
		r0 = rf(objectID, taskData, claims)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(primitive.ObjectID, *domain.UpdateTaskData, *domain.Claims) *domain.Error); ok {
		r1 = rf(objectID, taskData, claims)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*domain.Error)
		}
	}

	return r0, r1
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
